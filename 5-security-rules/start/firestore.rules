rules_version = '2';
service cloud.firestore {
  
  match /databases/{database}/documents {
   function isUserOwned(uid) {
    return request.auth.uid == uid;
   }

   function isUserObject() {
    return request.resource.data.keys().hasAll([
      'first',
      'email'
    ])
   }

   function costsMoreThanZero() {
    return request.resource.data.cost is number && request.resource.data.cost > 0;
   }

   function dateIsNotUpdated(){
    return request.read.data
      .diff(resource.data)
      .unchangedKeys()
      .hasOnly(['cost', 'category'])
   }

   function isCollaborator() {
    return get(/databases/$(database)/documents/admins/$(request.auth.uid)).role in ['admin', 'collaborator']
   }

   match /users/{uid} {
    allow read: if isUserOwned(uid);
    allow write: if isUserOwned(uid) && isUserObject();
   }

   match /expenses/{expensesId} {
    allow read: if isUserOwned(resources.data.uid)
    allow write: if isUserOwned(resources.data.uid) && costsMoreThanZero() && dateIsNotUpdated(); 
   }

   match /budget/{budgetId} {
    allow read: if isCollaborator()
   }
  }


}
